---

# Notes:
# Sample project C code is not presently written to produce a release artifact.
# As such, release build options are disabled.
# This sample, therefore, only demonstrates running a collection of unit tests.

:project:
  :use_exceptions: FALSE
  :use_test_preprocessor: TRUE
  :use_auxiliary_dependencies: TRUE
  :build_root: build
  :release_build: TRUE
  :test_file_prefix: test_
  :which_ceedling: gem
  :ceedling_version: 0.31.0

#:test_build:
#  :use_assembly: TRUE

:release_build:
  :output: MyApp.axp
  :use_assembly: TRUE

:environment:
  - path:
    - "/home/markus/ti/gcc-arm-none-eabi-9-2019-q4-major/bin:"
    - "#{ENV['PATH']}"

:extension:
  :executable: .bin

:paths:
  :test:
    - +:test/**
#    - -:test/support
  :source:
    - src/**
    - ../TIHercules/Testing/source/*
    #- /home/markus/ti/gcc-arm-none-eabi-9-2019-q4-major/
    #- /home/markus/ti/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/lib/
    #-
  :include:
    #- /home/markus/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/devices/msp432e4
    #- /home/markus/ti/simplelink_msp432e4_sdk_4_20_00_12/source/third_party/CMSIS/Include
    #- /home/markus/ti/simplelink_msp432e4_sdk_4_20_00_12/source/
    #- /home/markus/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/drivers
    #- /home/markus/ti/FreeRTOSv202012.00/FreeRTOS/Source/include
    #- /home/markus/ti/simplelink_msp432e4_sdk_4_20_00_12/kernel/freertos/builds/MSP432E411Y_BGAEVM/release
    #- /home/markus/ti/FreeRTOSv202012.00/FreeRTOS/Source/portable/GCC/ARM_CM7/r0p1
    #- /home/markus/ti/simplelink_msp432e4_sdk_4_20_00_12/source/ti/posix/gcc
    - ../TIHercules/Testing/include
    #- /home/markus/ti/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/include
    - externalTools/SMC
#  :support:
#    - test/support
  :libraries: []

:defines:
  # in order to add common defines:
  #  1) remove the trailing [] from the :common: section
  #  2) add entries to the :common: section (e.g. :test: has TEST defined)
  :common: &common_defines []
  :test:
    - *common_defines
    - TEST
  :test_preprocess:
    - *common_defines
    - TEST

:cmock:
  :mock_prefix: mock_
  :when_no_prototypes: :warn
  :enforce_strict_ordering: TRUE
  :plugins:
    - :ignore
    - :callback
  :treat_as:
    uint8:    HEX8
    uint16:   HEX16
    uint32:   UINT32
    int8:     INT8
    bool:     UINT8
  :includes:
    - <stdbool.h>
    - <stdint.h>
  :treat_externs: :include

# Add -gcov to the plugins list to make sure of the gcov plugin
# You will need to have gcov and gcovr both installed to make it work.
# For more information on these options, see docs in plugins/gcov
:gcov:
  :reports:
    - HtmlDetailed
  :gcovr:
    :html_medium_threshold: 75
    :html_high_threshold: 90

:tools:
  :release_compiler:
    :executable: arm-none-eabi-gcc
    :arguments:
      - ${1}
      - -marm
      - -march=armv7-r
      - -mfloat-abi=hard
      - -mfpu=vfpv3-d16
      - -ffunction-sections
      - -fdata-sections
      - -MMD
      #- -std=c99
      - -Wall
      - -pedantic
      - -c
      - -Os
      - -Wunused
      - -Wunknown-pragmas
      - -fno-builtin-malloc
      - -mabi=aapcs
      - --specs=nano.specs
      - -I"$": COLLECTION_PATHS_INCLUDE
      - -Dgcc
      - -o ${2}
  :release_assembler: 
    :executable: arm-none-eabi-as
    :arguments:
      - -g ${1}
#      - -mccs
      - -march=armv7-r
      - -mfloat-abi=hard
      - -mfpu=vfpv3-d16
      - -mlittle-endian
      - -o ${2}
  :release_linker:
    :executable: arm-none-eabi-gcc
    :arguments:
      #- -T project.ld
      #- --entry _c_int00
      #- --gc-sections
      - -mfpu=vfpv3-d16
      - -output_float_abi=auto
      - -Og
      - -g
      - -gdwarf-3
      - -gstrict-dwarf
      - -Wall
      - -specs="nosys.specs"
      - -o ${2}
      - ${1}
      #- /home/markus/ti/gcc-arm-none-eabi-9-2019-q4-major/arm-none-eabi/lib/arm/v5te/hard/libc_nano.a
      

# Ceedling defaults to using gcc for compiling, linking, etc.
# As [:tools] is blank, gcc will be used (so long as it's in your system path)
# See documentation to configure a given toolchain for use

# LIBRARIES
# These libraries are automatically injected into the build process. Those specified as
# common will be used in all types of builds. Otherwise, libraries can be injected in just
# tests or releases. These options are MERGED with the options in supplemental yaml files.
:libraries:
  :placement: :end
  :flag: "-l${1}"
  :path_flag: "-L ${1}"
  :system: []    # for example, you might list 'm' to grab the math library
  :test: []
  :release: []

:plugins:
  :load_paths:
    - "#{Ceedling.load_path}"
  :enabled:
    #- stdout_pretty_tests_report
    - stdout_gtestlike_tests_report
    - module_generator
    - xml_tests_report
    - gcov
...
