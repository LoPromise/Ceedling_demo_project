/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : test.sm
 */

#ifndef _TEST_SM_H
#define _TEST_SM_H

#include <assert.h>
#include <statemap.h>


struct Task;
struct testContext;

struct TaskState {
    void(*Done)(struct testContext *const fsm);
    void(*Start)(struct testContext *const fsm, long timeslice);
    void(*Stopped)(struct testContext *const fsm);
    void(*Suspend)(struct testContext *const fsm, int number);
    void(*Unblock)(struct testContext *const fsm);
    void(*Default)(struct testContext *const fsm);
    STATE_MEMBERS
};

extern const struct TaskState TaskMap_Suspended;
extern const struct TaskState TaskMap_Running;
extern const struct TaskState TaskMap_Blocked;
extern const struct TaskState TaskMap_Stopping;
extern const struct TaskState TaskMap_Stopped;

struct testContext {
    struct Task *_owner;
    FSM_MEMBERS(Task)
};

#ifdef NO_TEST_SM_MACRO
extern void testContext_Init(struct testContext *const fsm, struct Task *const owner);
extern void testContext_Done(struct testContext *const fsm);
extern void testContext_Start(struct testContext *const fsm, long timeslice);
extern void testContext_Stopped(struct testContext *const fsm);
extern void testContext_Suspend(struct testContext *const fsm, int number);
extern void testContext_Unblock(struct testContext *const fsm);
#else
#define testContext_Init(fsm, owner) \
    FSM_INIT((fsm), &Task_Idle); \
    (fsm)->_owner = (owner)

#define testContext_Done(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Done"); \
    getState(fsm)->Done((fsm)); \
    setTransition((fsm), NULL)

#define testContext_Start(fsm, timeslice) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Start"); \
    getState(fsm)->Start((fsm), (timeslice)); \
    setTransition((fsm), NULL)

#define testContext_Stopped(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Stopped"); \
    getState(fsm)->Stopped((fsm)); \
    setTransition((fsm), NULL)

#define testContext_Suspend(fsm, number) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Suspend"); \
    getState(fsm)->Suspend((fsm), (number)); \
    setTransition((fsm), NULL)

#define testContext_Unblock(fsm) \
    assert(getState(fsm) != NULL); \
    setTransition((fsm), "Unblock"); \
    getState(fsm)->Unblock((fsm)); \
    setTransition((fsm), NULL)
#endif

#endif

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
